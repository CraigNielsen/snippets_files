#time and time helpers
#_______________________________
snippet mock "mock testing etc"
@patch(module.__name__ + '.function_name', return_value=True)
def test_something(self, ds):

# or: with patch.object(Object, 'function of object', wraps=object_instance.function) as fun:
endsnippet

snippet datetimeparse "parse a datetime string" b
from dateutil.parser import parse
parse(${1:string}, ignoretz=True)
endsnippet


snippet datetimeFromString "convert string to format" b
datetime.strptime(${:stringOfDate}, '%b %d %Y %I:%M%p')
endsnippet

#_______________________________
#funtional snippets

snippet vr "constant defined like php var"
${${1}} ${2}
endsnippet

snippet enumlistcomp "enumerate a list comprehesion for index" b
${1} = [${2} for index, ${3} in enumerate(${4})]
endsnippet

snippet clojure "clojure 'currying' function" b
def ${1}(${2}):
	def ${3}(${4}):
		return ${5}
	return {3}
endsnippet

snippet pluck "high order function takes list of keys to extract each record from list of dicts" b
def pluck(keys):
	def pluck_fn(record):
		return reduce(lambda a, x: assoc(a, x, record[x]),
			keys,
			{})
	return pluck_fn
endsnippet

#_______________________________
#sqlalchemy snippets

snippet dbac "db session add and commit"
db.session.add(${1})
db.session.commit()
${2}
endsnippet

snippet dba "db session add"
db.session.add(${1})
endsnippet

snippet dbc "db session commit"
db.session.commit()
${1}
endsnippet

snippet shebang "shebang"
#!/bin/python3
## ${1}
endsnippet
snippet pdb "pdb"
import pudb; pu.db
endsnippet
#_______________________________
#Testing snippets

snippet testcase "template for testing file"
from backend import db
import pytest
from datetime import datetime, timedelta
from backend.testing import LegacyTestCase, factories


class Test${1}(LegacyTestCase):

	def setUp(self):
		super().setUp()

	def test_${2}(self):
endsnippet

snippet apitest "API test case setup"
import unittest
from flask import url_for

from backend import db
from backend.testing import APITestCase, factories
from backend.api.v1.resources.stock_units import ${1}


ENDPOINT = 'v1.${2}' #lowercase with no underscores
$1.assert_has_authorization = lambda x, y, z: 'hack'


class Test${3}(APITestCase):
	def setUp(self):
		super().setUp()
		self.session = factories.SessionFactory()
		db.session.add(self.session)
		db.session.commit()

	def test_${4}(self):
		${5} = factories.StockUnitFactory()
		db.session.add($5)
		db.session.commit()

		r = self.get(
				'api/v1/${6}',
				session_token=self.session.token,
		)

		self.assert200(r, r.json)
		self.assertEqual(r.json['data'][0]['id'], $5.id, r.json)
endsnippet
